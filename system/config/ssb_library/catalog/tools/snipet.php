<?php class snipet extends Controller { private $ssb_data;private $ssb_cache;private $selfData;function __construct(){ global $registry;parent::__construct($registry);require_once DIR_CONFIG.'ssb_library/ssb_data.php';$this->ssb_data=ssb_data::getInstance();require_once DIR_CONFIG.'ssb_library/ssb_cache.php';$this->ssb_cache=ssb_cache::getInstance();} static private $Instance =NULL;static public function getInstance() { if(self::$Instance==NULL){ $class=__CLASS__;self::$Instance=new $class;} return self::$Instance;} public function insertSnipet($page,$data,$pageName){ if(!isset($data['product_id']) AND $pageName=='product'){return $page;} $this->page =$page;$this->href =md5($this->ssb_cache->selfURL());if(isset($_SESSION["ssb_page_type"]) AND $_SESSION["ssb_page_type"]=='admin'){ return $this->page;} $this->selfData =$data;$this->pageName=$pageName;$cache_data=$this->ssb_data->getSetting('ssb_cache');$this->cache_snippet=$cache_data['snippet'];$tools=$this->ssb_data->getSetting('tools');if(!$tools){return $page;} $this->getTagValue();foreach($tools as $name=> $tool){ if($tool['type'] !='snippet'){continue;} if($tool['status']){ $this->setpageData();$func='get_'.$name;$this->$func($tool);} } $this->prepareImageForPinteres();return $this->page;} private function prepareImageForPinteres(){ $pt_html='<meta name="pinterest" content="'. $this->pageData['thumb'] .'"/>';$this->insertInHeader($pt_html);} private function get_ld_json($setting){ $store_data=$setting['data']['stores'][$this->config->get('config_store_id')];$ld_html='     <script type="application/ld+json">      {        "@context": "http://schema.org",        "@type": "Store",        "address": {       "@type": "PostalAddress",       "addressLocality": "'. $setting['data']['address']['addressLocality'] .'",       "addressRegion": "'. $setting['data']['address']['addressRegion'] .'",       "postalCode": "'. $setting['data']['address']['postalCode'] .'",       "streetAddress": "'. $setting['data']['address']['streetAddress'] .'"        },        "email": "'. $store_data['email'] .'",        "name": "'. $store_data['name'] .'",        "telephone": "'. $store_data['telephone'] .'",        "url" : "'. $store_data['url'] .'",        "logo" : "'. $store_data['logo'] .'"';$same_as='';$same_as_items=array();foreach($setting['data']['same_as'] as $type=> $link){ if($link){ $same_as_items[]='"' . $link . '"';} } if(count($same_as_items)){ $ld_html.=',      "sameAs" : [ '.implode(", ",$same_as_items).' ]      ';} $ld_html.='}     </script>';$ld_copo='';$ld_copo_items=array();foreach($setting['data']['contact_point'] as $type=> $phone){ if($phone){ $ld_copo_items[]='{ "@type" : "ContactPoint",         "telephone" : "'. $phone .'",         "contactType" : "'. str_replace("_", " ", $type) .'"       }';} } if(count($ld_copo_items)){ $ld_copo='     <script type="application/ld+json">      { "@context" : "http://schema.org",        "@type" : "Organization",        "url" : "'. $store_data['url'] .'",        "contactPoint" : [       '.implode(", ",$ld_copo_items).'       ] }     </script>     ';} $ld_geo='';if($setting['data']['geo']['latitude'] && $setting['data']['geo']['longitude']){ $ld_geo='     <script type="application/ld+json">      {        "@context": "http://schema.org",        "@type": "Place",        "geo": {       "@type": "GeoCoordinates",       "latitude": "'. $setting['data']['geo']['latitude'] .'",       "longitude": "'. $setting['data']['geo']['longitude'] .'"        },        "name": "'. $store_data['name'] .'"      }     </script>     ';} $ld_search_box='';if($setting['data']['search_box']['status']){ $ld_search_box='     <script type="application/ld+json">      {        "@context": "http://schema.org",        "@type": "WebSite",        "url": "'. $store_data['url'] .'",          "potentialAction": {        "@type": "SearchAction",        "target": "'. $setting['data']['search_box']['search_url'] .'",        "query-input": "required name=search_term_string"         }      }     </script>     ';} $ld_html.=$ld_copo.$ld_geo.$ld_search_box;if($ld_html)$this->insertInHeader($ld_html);} private function get_google_publisher($setting){ if($this->pageName !='home')return;$gp_html='<link href="https://plus.google.com/' . $setting['data']['href'] . '" rel="publisher"/>';$this->insertInHeader($gp_html);} private function get_micro_data($setting){ if($this->pageName=='category'){ $this->get_micro_data_CATEGORY($setting);return;} if($this->pageName=='brand'){ $this->get_micro_data_BRAND($setting);return;} if($this->pageName=='home'){ $this->get_micro_data_HOME($setting);return;} $pageData=$this->pageData;$this->setCustom_reviews();$breadcrumbs =$this->selfData['breadcrumbs'];$custom_reviews=$this->selfData['custom_reviews'];$rating =$this->selfData['rating'];$reviews =$this->selfData['reviews'];$quantity =$this->selfData['quantity'];$stock =$quantity > 0 ? "InStock":"OutOfStock";$md_html='<div style="display:none;">';$bread_revers =array_reverse($breadcrumbs);$bread_text='';$category_content='';$bread_count=count($bread_revers);$i=1;foreach($bread_revers as $breadcrumb) { $child=$i !=$bread_count ? 'itemprop="child"':'';$bread_text='     <div '.$child.' itemscope itemtype="http://data-vocabulary.org/Breadcrumb">       <a href="'. $breadcrumb['href'] .'" itemprop="url">      <span itemprop="title">'.$breadcrumb['text'].'</span>       </a>'.$bread_text.'</div>';if($i !=1){ $category_content=$breadcrumb['text'].' > '.$category_content;} $i++;} $md_html.=$bread_text.'</div>';$md_html.='   <div itemscope="itemscope" itemtype="http://schema.org/Product">';$md_html.='   <meta itemprop="name" content="'. $pageData['name'] .'">   <meta itemprop="url" content="'. $pageData['url'] . '" >';if($setting['data']['description'] AND $pageData['description']) { $description=$this->getSentences($pageData['description'],$setting['data']['total_num_sentence']);$md_html.='   <meta itemprop="description" content="'. $description .'">';} if($pageData['thumb']) { $md_html.='   <meta itemprop="image" content="'. $pageData['thumb'] .'">';} if($pageData['model']) { $md_html.='   <meta itemprop="model" content="'. $pageData['model'] .'">';} if($pageData['manufacturer']) { $md_html.='   <meta itemprop="manufacturer" content="'. $pageData['manufacturer'] .'">';} $category_content_=trim($category_content,' > ');if($category_content_ !=''){ $category_content_='<meta itemprop="category" content="'. $category_content_ .'" />';} $md_html.='   <div itemprop="offers" itemscope="itemscope" itemtype="http://schema.org/Offer" >    <meta itemprop="name" content="'. $pageData['name'] .'" />    <meta itemprop="price" content="'. $pageData['price'] .'" />    <meta itemprop="priceCurrency" content="'. $pageData['currency'] .'" />    <link itemprop="availability" href="http://schema.org/'. $stock .'" />    '.$category_content_.'   </div>';if($setting['data']['aggregateRating'] AND (int)$reviews) { $md_html.='   <div itemprop="aggregateRating" itemscope="itemscope" itemtype="http://schema.org/AggregateRating">    <meta itemprop="ratingValue" content="'. $rating .'" />    <meta itemprop="reviewCount" content="'. (int)$reviews .'" />   </div>';} if($setting['data']['custom_reviews'] AND $custom_reviews) { $i_review=0;foreach($custom_reviews as $review) { $md_html.='   <div itemprop="review" itemscope="itemscope" itemtype="http://schema.org/Review">    <meta itemprop="name" content = "'. $pageData['name'] .'" />    <meta itemprop="author" content = "'. $review['author'] .'" />    <meta itemprop="datePublished" content="'. date('Y-m-d', strtotime(str_replace ('/', '-',$review['date_added']))) .'" />    <div itemprop="reviewRating" itemscope="itemscope" itemtype="http://schema.org/Rating">     <meta itemprop="worstRating" content = "1" />     <meta itemprop="ratingValue" content = "' .$review['rating'] .'" />     <meta itemprop="bestRating" content = "5" />    </div>    <meta itemprop="description" content = "'. $review['text']. '" />   </div>';$i_review++;if($i_review==8) break;} } $md_html.='</div>';$this->insertInBody($md_html);} private function get_open_graph($setting){ if($this->pageName=='category'){ $this->get_open_graph_CATEGORY($setting);return;} if($this->pageName=='brand'){ $this->get_open_graph_BRAND($setting);return;} if($this->pageName=='home'){ $this->get_open_graph_HOME($setting);return;} $pageData=$this->pageData;$prefix='prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# product: http://ogp.me/ns/product#"';$this->addAttrToHeader($prefix);$og_html='   <meta property="og:type" content="og:product" />   <meta property="og:title" content="'. $pageData['name'] .'" />   <meta property="og:url" content="'. $this->tagValue['canonical'] .'" />   <meta property="product:price:amount" content="'. $pageData['price'] .'"/>   <meta property="product:price:currency" content="'. $pageData['currency'] .'"/>';if($pageData['thumb']){ $og_html.='   <meta property="og:image" content="'. $pageData['thumb'] .'" />';} if($setting['data']['description'] AND $pageData['description']){ $description=$this->getSentences($pageData['description'],$setting['data']['total_num_sentence']);$og_html.='   <meta property="og:description" content="'. $description .'" />';} $this->insertInHeader($og_html);} private function get_twiter_card($setting){ if($this->pageName=='category'){ $this->get_twiter_card_CATEGORY($setting);return;} if($this->pageName=='brand'){ $this->get_twiter_card_BRAND($setting);return;} if($this->pageName=='home'){ $this->get_twiter_card_HOME($setting);return;} $pageData=$this->pageData;$tc_html='   <meta name="twitter:card" content="product"/>   <meta name="twitter:url" content="'. $pageData['url'] .'"/>   <meta name="twitter:title" content="'. $pageData['name'] .'"/>   <meta name="twitter:image" content="'. $pageData['thumb'] .'"/>   <meta name="twitter:data1" content="'. $pageData['price'] .'"/>   <meta name="twitter:label1" content="Price">   <meta name="twitter:data2" content="'. $pageData['currency'] .'"/>   <meta name="twitter:label2" content="Currency">';if($setting['data']['description'] AND $pageData['description']){ $description=$this->getMBstring($pageData['description'],137,'...');$tc_html.='   <meta name="twitter:description" content="'. $description .'"/>';} if($setting['data']['nick']){ $tc_html.='   <meta name="twitter:creator" content="'. $setting['data']['nick'] .'"/>';} $this->insertInHeader($tc_html);} private function get_micro_data_CATEGORY($setting){ $pageData=$this->pageData;$breadcrumbs =$this->selfData['breadcrumbs'];$md_html='<div style="display:none;">';$bread_revers =array_reverse($breadcrumbs);$bread_text='';$bread_count=count($bread_revers);$i=1;foreach($bread_revers as $breadcrumb) { $child=$i !=$bread_count ? 'itemprop="child"':'';$bread_text='     <div '.$child.' itemscope itemtype="http://data-vocabulary.org/Breadcrumb">       <a href="'. $breadcrumb['href'] .'" itemprop="url">      <span itemprop="title">'.$breadcrumb['text'].'</span>       </a>'.$bread_text.'</div>';$i++;} $md_html.=$bread_text.'</div>';$md_html.='     <div itemscope="itemscope" itemtype="http://schema.org/Enumeration">     <meta itemprop="name" content="'. $pageData['name'] .'"/>';if($pageData['thumb']){ $md_html.='     <meta itemprop="image" content="'. $pageData['thumb'] .'"/>';} $md_html.='</div>';$this->insertInBody($md_html);} private function get_open_graph_CATEGORY($setting){ $pageData=$this->pageData;$prefix='prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"';$this->addAttrToHeader($prefix);$og_html='   <meta property="og:type" content="og:website" />   <meta property="og:title" content="'. $pageData['name'] .'" />   <meta property="og:url" content="'. $this->tagValue['canonical'] .'" />';if($pageData['thumb']){ $og_html.='   <meta property="og:image" content="'. $pageData['thumb'] .'" />';} if($setting['data']['description'] AND $pageData['description']){ $description=$this->getSentences($pageData['description'],$setting['data']['total_num_sentence']);$og_html.='   <meta property="og:description" content="'. $description .'" />';} $this->insertInHeader($og_html);} private function get_twiter_card_CATEGORY($setting){ $pageData=$this->pageData;$tc_html='   <meta name="twitter:card" content="category"/>   <meta name="twitter:url" content="'. $pageData['url'] .'"/>   <meta name="twitter:title" content="'. $pageData['name'] .'"/>   <meta name="twitter:image" content="'. $pageData['thumb'] .'"/>';if($setting['data']['description'] AND $pageData['description']){ $description=$this->getMBstring($pageData['description'],137,'...');$tc_html.='   <meta name="twitter:description" content="'. $description .'"/>';} if($setting['data']['nick']){ $tc_html.='   <meta name="twitter:creator" content="'. $setting['data']['nick'] .'"/>';} $this->insertInHeader($tc_html);} private function get_micro_data_BRAND($setting){ $pageData=$this->pageData;$breadcrumbs =$this->selfData['breadcrumbs'];$md_html='   <div style="display:none;">';$md_html.='<div>';$bread_revers =array_reverse($breadcrumbs);$bread_text='';$bread_count=count($bread_revers);$i=1;foreach($bread_revers as $breadcrumb) { $child=$i !=$bread_count ? 'itemprop="child"':'';$bread_text='     <div '.$child.' itemscope itemtype="http://data-vocabulary.org/Breadcrumb">       <a href="'. $breadcrumb['href'] .'" itemprop="url">      <span itemprop="title">'.$breadcrumb['text'].'</span>       </a>'.$bread_text.'</div>';$i++;} $md_html.=$bread_text.'</div>';$md_html.='<div itemscope itemtype="http://schema.org/Organization">    <a itemprop="url" href="'. $pageData['url'] .'"><meta itemprop="name" content="'. $pageData['name'] .'"/>    </a>';if($setting['data']['description'] AND $pageData['description']){ $description=$this->getSentences($pageData['description'],$setting['data']['total_num_sentence']);$md_html.='<meta itemprop="description" content="'. $description .'" />';} $md_html.='</div></div>';$this->insertInBody($md_html);} private function get_open_graph_BRAND($setting){ $pageData=$this->pageData;$prefix='prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"';$this->addAttrToHeader($prefix);$og_html='   <meta property="og:type" content="og:website" />   <meta property="og:title" content="'. $pageData['name'] .'" />   <meta property="og:url" content="'. $this->tagValue['canonical'] .'" />';if($pageData['thumb']){ $og_html.='   <meta property="og:image" content="'. $pageData['thumb'] .'" />';} if($setting['data']['description'] AND $pageData['description']){ $description=$this->getSentences($pageData['description'],$setting['data']['total_num_sentence']);$og_html.='   <meta property="og:description" content="'. $description .'" />';} $this->insertInHeader($og_html);} private function get_twiter_card_BRAND($setting){ $pageData=$this->pageData;$tc_html='   <meta name="twitter:card" content="brand"/>   <meta name="twitter:url" content="'. $pageData['url'] .'"/>   <meta name="twitter:title" content="'. $pageData['name'] .'"/>   <meta name="twitter:image" content="'. $pageData['thumb'] .'"/>';if($setting['data']['description'] AND $pageData['description']){ $description=$this->getMBstring($pageData['description'],137,'...');$tc_html.='   <meta name="twitter:description" content="'. $description .'"/>';} if($setting['data']['nick']){ $tc_html.='   <meta name="twitter:creator" content="'. $setting['data']['nick'] .'"/>';} $this->insertInHeader($tc_html);} private function get_micro_data_HOME($setting){ $pageData=$this->pageData;$md_html='<div itemscope itemtype="http://schema.org/Organization">    <a itemprop="url" href="'. $pageData['url'] .'"><meta itemprop="name" content="'. $pageData['name'] .'"/>    </a></div>';$this->insertInBody($md_html);} private function get_open_graph_HOME($setting){ $pageData=$this->pageData;$prefix='prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"';$this->addAttrToHeader($prefix);$og_html='   <meta property="og:type" content="og:website" />   <meta property="og:title" content="'. $pageData['name'] .'" />   <meta property="og:url" content="'. $this->tagValue['canonical'] .'" />';if($pageData['thumb']){ $og_html.='   <meta property="og:image" content="'. $pageData['thumb'] .'" />';} if($setting['data']['description'] AND $pageData['description']){ $description=$this->getSentences($pageData['description'],$setting['data']['total_num_sentence']);$og_html.='   <meta property="og:description" content="'. $description .'" />';} $this->insertInHeader($og_html);} private function get_twiter_card_HOME($setting){ $pageData=$this->pageData;$tc_html='   <meta name="twitter:card" content="site"/>   <meta name="twitter:url" content="'. $pageData['url'] .'"/>   <meta name="twitter:title" content="'. $pageData['name'] .'"/>   <meta name="twitter:image" content="'. $pageData['thumb'] .'"/>';if($setting['data']['description'] AND $pageData['description']){ $description=$this->getMBstring($pageData['description'],137,'...');$tc_html.='   <meta name="twitter:description" content="'. $description .'"/>';} if($setting['data']['nick']){ $tc_html.='   <meta name="twitter:creator" content="'. $setting['data']['nick'] .'"/>';} $this->insertInHeader($tc_html);} private function getTagValue($names=array()){ if(isset($this->tagValue)) return $this->tagValue;if(!count($names)){ $names=array( array('tag'=> 'link','attr'=> 'rel','attr_val'=> 'canonical','attr_res'=> 'href'),array('tag'=> 'meta','attr'=> 'name','attr_val'=> 'description','attr_res'=> 'content'),array('tag'=> 'meta','attr'=> 'name','attr_val'=> 'keywords','attr_res'=> 'content'),array('tag'=> 'title','attr'=> 'getValue') );} $href=$this->href;$href='tagValue.'.$this->pageName.'.'.(int)$this->config->get('config_language_id').'.'.(int)$this->config->get('config_store_id').'.'.$href;$tagValue=$this->cache_snippet ? $this->ssb_cache->cacheGet($href,'snippet'):false;if($tagValue){ $this->tagValue=$tagValue;return $this->tagValue;} $internal_errors=libxml_use_internal_errors(true);$dom=new DOMDocument;$searchPage=mb_convert_encoding($this->page,'HTML-ENTITIES',"UTF-8");@$dom->loadHTML($searchPage);$respond=array();foreach($names as $i=> $param){ $result='';if($param['attr']=='getValue'){ $nodes=$dom->getElementsByTagName($param['tag']);foreach($nodes as $node){ $result.=$node->nodeValue;} $respond[$param['tag']]=$result;}else{ $nodes=$dom->getElementsByTagName($param['tag']);foreach ($nodes as $node){ if ($node->getAttribute($param['attr'])===$param['attr_val']){ $result=$node->getAttribute($param['attr_res']);} } if($param['attr_val']=='canonical' && $result==''){ if($this->pageName=='home'){ $result=HTTP_SERVER;}else{ $result=$this->selfData['breadcrumbs'][count( $this->selfData['breadcrumbs'])-1]['href'];} } $respond[$param['attr_val']]=$result;} } libxml_use_internal_errors($internal_errors);if($this->cache_snippet)$this->ssb_cache->cacheSet($href,$respond,'snippet');$this->tagValue=$respond;return $respond;} private function setpageData(){ if(isset($this->pageData)) return $this->pageData;$href=$this->href;$href='page_data.'.$this->pageName.'.'.(int)$this->config->get('config_language_id').'.'.(int)$this->config->get('config_store_id').'.'.$href;$page_data=$this->cache_snippet ? $this->ssb_cache->cacheGet($href,'snippet'):false;if($page_data){ $this->pageData=$page_data;return;} if(isset($this->selfData['breadcrumbs'])){ foreach($this->selfData['breadcrumbs'] as $key=> $breadcrumb){ $this->selfData['breadcrumbs'][$key]['text']=trim(strip_tags($breadcrumb['text']));} } if(!isset($this->selfData['thumb']) OR !$this->selfData['thumb']){ if ($this->config->get('config_logo') && file_exists(DIR_IMAGE.$this->config->get('config_logo'))) { $this->load->model('tool/image');$thumb=$this->model_tool_image->resize($this->config->get('config_logo'),220,220);} else { $thumb='';} }else{ $thumb=$this->selfData['thumb'];} if($this->pageName=='product'){ $price=$this->selfData['special'] ? $this->selfData['special']:$this->selfData['price'];$price=preg_replace("/[^0-9.,0-9]/",'',$price);$this->pageData=array( 'url' => $this->selfData['breadcrumbs'][count( $this->selfData['breadcrumbs'])-1]['href'],'price' => $price,'currency' => $this->currency->getCode(),'name' => $this->clearString($this->selfData['heading_title'],true,true),'thumb' => $thumb,'description'=> $this->clearString($this->selfData['description'],true,true),'model' => $this->selfData['model'],'manufacturer'=> $this->selfData['manufacturer'] );}else if($this->pageName=='category'){ $this->pageData=array( 'url' => $this->selfData['breadcrumbs'][count( $this->selfData['breadcrumbs'])-1]['href'],'name' => $this->clearString($this->selfData['heading_title'],true,true),'thumb' => $thumb,'description'=> $this->clearString($this->selfData['description'],true,true) );}else if($this->pageName=='brand'){ $description=isset($this->selfData['description']) ? $this->clearString($this->selfData['description'],true,true):'';$this->pageData=array( 'url' => $this->selfData['breadcrumbs'][count( $this->selfData['breadcrumbs'])-1]['href'],'name' => $this->clearString($this->selfData['heading_title'],true,true),'thumb' => $thumb,'description'=> $description );}else if($this->pageName=='home'){ $this->pageData=array( 'url' => HTTP_SERVER,'name' => $this->clearString($this->document->getTitle(),true,true),'thumb' => $thumb,'description'=> $this->config->get('config_meta_description') );} if($this->cache_snippet)$this->ssb_cache->cacheSet($href,$this->pageData,'snippet');} private function addAttrToHeader($attr){ $this->page=str_replace_once('<head','<head '.$attr,$this->page);} private function insertInHeader($html){ $this->page=str_replace_once('</head>',$html.'  </head>',$this->page);} private function insertInBody($html){ $this->page=str_replace_once('</body>',$html.'  </body>',$this->page);} private function clearString($text,$full=false,$html_ch=false){ $clear_char=array( 'from' => array('\n','\r','\\','"', '_'),     'to' => array('', '', ' ', '\'', ' ')    );    if($full){     $text = $this->db->escape(html_entity_decode($text, ENT_COMPAT, "UTF-8"));    }    if($html_ch){     $text = strip_tags($text);    }    $text = trim(str_replace($clear_char['from'], $clear_char['to'], $text));    return $text;   }   private function setCustom_reviews() {       $this->load->model('catalog/review');       if (isset($this->request->get['page'])) {        $page = $this->request->get['page'];       } else {        $page = 1;       }       $results = $this->model_catalog_review->getReviewsByProductId($this->selfData['product_id'], ($page - 1) * 5, 5);       $this->selfData['custom_reviews'] = array();       foreach ($results as $result) {        $this->selfData['custom_reviews'][] = array(         'author'     => $result['author'],         'text'       => $result['text'],         'rating'     => (int)$result['rating'],         'date_added' => date($this->language->get('date_format_short'), strtotime($result['date_added']))        );       }   }       private function getMBstring($text , $count, $end = '') {    $text = is_array($text) ? $text[(int)$this->config->get('config_language_id')] : $text;    $text = mb_substr($text , 0, $count, 'UTF-8'). $end;    return $text;   }   private function getSentences($text , $count) {    $text = is_array($text) ? $text[(int)$this->config->get('config_language_id')] : $text;    $text = strip_tags(html_entity_decode($text));    $pos = 0;    $found = false;    for ($x=0; $x<$count; $x++)    {      $pos = strpos($text, '.', $pos);     if($pos !== false){      $pos++;      $found = true;     }else{      break;     }    }    if(!$found OR $pos === false){     $respond = $text;    }else{     $respond = mb_substr($text, 0, $pos);    }    return $respond;   }  }  function str_replace_once($search, $replace, $text)   {      $pos = strpos($text, $search);      return $pos!==false ? substr_replace($text, $replace, $pos, strlen($search)) : $text;   }  ?>
