<?php
class ControllerModuleRecentView extends Controller {
	protected function index($setting) {				
		static $module = 0;
		
		$this->document->addStyle('catalog/view/theme/' . $this->config->get('config_template') . '/stylesheet/recent_view_list.css');
		$this->document->addScript('catalog/view/javascript/jquery/jquery.bxSlider.min.js');
		
		
		$this->load->model('catalog/product');
		$this->load->model('tool/image');
		
		$this->language->load('module/recent_view');
		
		$this->data['heading_title'] = $this->config->get('recent_view_heading_title_'. $this->config->get('config_language_id'));
		$this->data['display_type'] = $setting['display_type'];
		
		$this->data['button_cart'] = $this->language->get('button_cart');
		
		$this->data['text_show_more'] = $this->language->get('text_show_more');
		
		if ($this->config->get('text_quick_shop')) {
			$this->data['text_quick_shop'] = $this->config->get('text_quick_shop');
		} else {
			$this->data['text_quick_shop'] = $this->language->get('text_quick_shop');
		}
		
		$this->data['seo_data'] = array();
		
		$datas = $this->db->query("SELECT `query`, `keyword`  FROM `" . DB_PREFIX . "url_alias`");
		
		foreach ($datas->rows as $data) {
			if(preg_match("/product_id/i", $data['query'])){
				$this->data['seo_data'][]= array(
					'query' => $data['query'],
					'keyword' => $data['keyword']
				);
			}
		}
		
		$this->data['products'] = array();

		$products_ids = array();
		
		if (isset($this->session->data['product_recent_view'])) {
			$products_ids =  array_unique(array_reverse($this->session->data['product_recent_view']));
			$this->data['number_product'] = count($products_ids);
			array_splice($products_ids, $setting['limit']);
		}	
		
		if (empty($setting['limit'])) {
			$this->data['limit'] = 4;
		}else{
			$this->data['limit'] = $setting['limit'];
		}
		
		
		foreach($products_ids as $product_id) {
		    $result = $this->model_catalog_product->getProduct($product_id);

			if ($result['image']) {
				$image = $this->model_tool_image->resize($result['image'], $setting['image_width'], $setting['image_height']);
			} else {
				$image = false;
			}
						
			if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
				$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')));
			} else {
				$price = false;
			}
					
			if ((float)$result['special']) {
				$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')));
			} else {
				$special = false;
			}
			
			if ($this->config->get('config_review_status')) {
				$rating = $result['rating'];
			} else {
				$rating = false;
			}
			
			$this->data['products'][] = array(
				'product_id' => $result['product_id'],
				'thumb'   	 => $image,
				'name'    	 => $result['name'],
				'price'   	 => $price,
				'special' 	 => $special,
				'rating'     => $rating,
				'reviews'    => sprintf($this->language->get('text_reviews'), (int)$result['reviews']),
				'href'    	 => $this->url->link('product/product', 'product_id=' . $result['product_id']),
			);
		}

		$this->data['module'] = $module++; 
		
		if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/module/recent_view.tpl')) {
			$this->template = $this->config->get('config_template') . '/template/module/recent_view.tpl';
		} else {
			$this->template = 'default/template/module/recent_view.tpl';
		}

		$this->render();
	}

	public function viewMoreProducts(){
		$this->language->load('module/recent_view');
		
		$this->data['text_show_more'] = $this->language->get('text_show_more');
		
		$this->data['button_cart'] = $this->language->get('button_cart');
		
		$this->load->model('catalog/product');
		
		$this->load->model('tool/image');
		
		$module = $this->request->get['module'];
		
		$this->data['module'] = $module;
		
		$recent_view_module = $this->config->get('recent_view_module');
		
		$setting = $recent_view_module[$module];
		
		if (empty($setting['limit'])) {
			$limit = 4;
		}else{
			$limit = $setting['limit'];
		}
						
		$count = $this->request->get['count'];
		
		$this->data['number_product'] = $this->model_catalog_product->getTotalProducts();
		
		$this->data['limit'] = $limit + $count;
		
		$this->data['products'] = array();
		
		$data = array(
			'sort'  => 'p.date_added',
			'order' => 'DESC'
		);

		$results = $this->model_catalog_product->getProducts($data);
		
		$results = array_slice($results, (int)$count, (int)$limit);
		
		foreach ($results as $result) {
			if ($result['image']) {
				$image = $this->model_tool_image->resize($result['image'], $setting['image_width'], $setting['image_height']);
			} else {
				$image = false;
			}
						
			if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
				$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')));
			} else {
				$price = false;
			}
					
			if ((float)$result['special']) {
				$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')));
			} else {
				$special = false;
			}
			
			if ($this->config->get('config_review_status')) {
				$rating = $result['rating'];
			} else {
				$rating = false;
			}
			
			$this->data['products'][] = array(
				'product_id' => $result['product_id'],
				'thumb'   	 => $image,
				'name'    	 => $result['name'],
				'price'   	 => $price,
				'special' 	 => $special,
				'rating'     => $rating,
				'reviews'    => sprintf($this->language->get('text_reviews'), (int)$result['reviews']),
				'href'    	 => $this->url->link('product/product', 'product_id=' . $result['product_id']),
			);
		}
		
		$json = array();
	
		if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/module/recent_view_more.tpl')) {
			$this->template = $this->config->get('config_template') . '/template/module/recent_view_more.tpl';
		} else {
			$this->template = 'default/template/module/recent_view_more.tpl';
		}
		
		$json['html'] = $this->render();
		
		$this->response->setOutput(json_encode($json));
	}
}
?>